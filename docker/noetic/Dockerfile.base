FROM nvidia/cudagl:11.1.1-devel-ubuntu20.04
# ARG USER
# ENV USER ${USER}
ENV USER appuser
ENV HOME /home/${USER}
ENV ROS_WORKSPACE ${HOME}/catkin_ws
ENV PASS password

ENV DEBIAN_FRONTEND=noninteractive

RUN apt update
RUN apt-get install -y \
    ca-certificates git wget sudo ninja-build \
	iputils-ping net-tools netcat lsb-release vim tmux

RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
RUN apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
RUN apt update
RUN apt-get install -y --allow-downgrades --allow-remove-essential --allow-change-held-packages \
	libpcap-dev libopenblas-dev \
	gstreamer1.0-tools libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev \
	ros-noetic-desktop python3-rosdep python3-rosinstall-generator python3-vcstool build-essential \
	python3-catkin-tools

# キーボードレイアウト選択回避 | ref: https://qiita.com/DS27/items/7301cce7a2c1dec107ad
RUN apt-get install -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" \
    ros-noetic-rqt ros-noetic-rqt-common-plugins \
    ros-noetic-rviz \
    ros-noetic-rviz-visual-tools \
    ros-noetic-robot-state-publisher \
    ros-noetic-joint-state-publisher \
    ros-noetic-joint-state-publisher-gui \
    ros-noetic-image-* \
    ros-noetic-rqt-image-view 

RUN mkdir -p ${ROS_WORKSPACE}/src

RUN touch ${HOME}/.bashrc
# Configure ROS
RUN echo "source /opt/ros/noetic/setup.bash" >> ${HOME}/.bashrc
RUN echo "export ROSLAUNCH_SSH_UNKNOWN=1" >> ${HOME}/.bashrc
RUN echo "set +e" >> ${HOME}/.bashrc

WORKDIR ${ROS_WORKSPACE}
RUN /bin/bash -c "source /opt/ros/noetic/setup.bash; catkin build"
RUN echo "source \${ROS_WORKSPACE}/devel/setup.bash" >> ${HOME}/.bashrc
RUN echo "export ROS_PACKAGE_PATH=\${ROS_PACKAGE_PATH}:${ROS_WORKSPACE}" >> ${HOME}/.bashrc
RUN echo "export ROS_IP=\$(hostname -i)" >> ${HOME}/.bashrc
RUN echo "export PYTHONPATH=\${ROS_WORKSPACE}/devel/lib/python3/dist-packages:\${PYTHONPATH}" >> ${HOME}/.bashrc

RUN useradd -s /bin/bash ${USER}
RUN usermod -d ${HOME} ${USER}
RUN gpasswd -a ${USER} sudo
RUN chown -R ${USER} ${HOME}
RUN echo "${USER}:${PASS}" | chpasswd
# /dev/video0のPermission Denied回避
RUN usermod -aG sudo,video ${USER}

USER ${USER}
ENV PATH="/home/appuser/.local/bin:${PATH}"

RUN wget https://bootstrap.pypa.io/pip/get-pip.py && \
	# python3.7 get-pip.py --user && \
	python3.8 get-pip.py --user && \
	rm get-pip.py

# Important! Otherwise, it uses existing numpy from host-modules which throws error
RUN pip install --user numpy==1.20.3

# install dependencies
# See https://pytorch.org/ for other options if you use a different version of CUDA
RUN pip install --user tensorboard cmake   # cmake from apt-get is too old
RUN pip install --user torch==1.10 torchvision==0.11.1 -f https://download.pytorch.org/whl/cu111/torch_stable.html
RUN pip install --user opencv-python

RUN pip install --user 'git+https://github.com/facebookresearch/fvcore'
# install detectron2
RUN git clone https://github.com/facebookresearch/detectron2 detectron2_repo
# set FORCE_CUDA because during `docker build` cuda is not accessible
ENV FORCE_CUDA="1"
# This will by default build detectron2 for all common cuda architectures and take a lot more time,
# because inside `docker build`, there is no way to tell which architecture will be used.
ARG TORCH_CUDA_ARCH_LIST="Kepler;Kepler+Tesla;Maxwell;Maxwell+Tegra;Pascal;Volta;Turing"
ENV TORCH_CUDA_ARCH_LIST="${TORCH_CUDA_ARCH_LIST}"

RUN pip install --user -e detectron2_repo

# Set a fixed model cache directory.
ENV FVCORE_CACHE="/tmp"

CMD ["/bin/bash"]